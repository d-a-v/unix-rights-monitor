#!/bin/sh
# 
# (BSD 2-clause License)
#
# Copyright (c) 2014, LAAS-CNRS
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the
# following conditions are met:
# 
# 1. Redistributions of source code must retain the above
# copyright notice, this list of conditions and the following
# disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials
# provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

version=00.20140918

# linux specific, max number of watched dir/files (8192 seems to be the default)
n=8192
#n=524288

# default minimum email interval
interval_seconds=10

purpose ()
{
	cat << EOF

Automatically send email when new dir/files are created.
Can be started from user's .login/.profile .
Based on linux kernel inotify.
Example: 
$1 -m me@some.where[,john@doe.again] [-m jane@iss.nasa] /ftpserver/proj1 [/net/repository/proj2 ...]

EOF
}

#----------------------------------------------------------------------------

help ()
{
	cat << EOF

$1 [options] <directory> [<directory> ...]
version: $version
options:
	-?|-h|--help		- 
	-i <interval>		- minimum interval between mails (seconds, default: $interval_seconds)
	-s <'email subject'>	- email subject
	-m <e@mail[,e@mail...]>	- e-mail address list
	-v|-d			- verbose, no background, debug
	-k			- stop monitoring (same directories must be provided)
	-V			- show version
`purpose $1`

EOF
}

#----------------------------------------------------------------------------


mailer ()
{
	while :; do
		sleep "$interval_seconds"
		test -f $pid || break
		if [ -r $pool ]; then
			mv $pool $pool.now
			(
				echo "Subject: $subject (${directories# })"
				echo ""
				echo "# theses file have been created during the last $interval seconds:"
				LANG=C date '+# %c'
				echo ""
				cat $pool.now
			) | sendmail "$email" && rm -f $pool.now
		fi
	done
}

linuxwatch ()
{
	mailer 1>/dev/null 2>/dev/null & # autosuicide-selfkiller
	
	qopt=""; $verbose || qopt="-q"

	inotifywait -mr $qopt -e CREATE --format "%w%f" $directories | \
	while read path; do
		$verbose && echo "path='$path'"
		echo "$path" >> $pool
	done
}

#----------------------------------------------------------------------------

kill=false
mode=""
owner=""
group=""
verbose=false

# check if running linux
if [ ! -r /proc/sys/fs/inotify/max_user_watches ]; then
	echo "$0: not running on linux"
	exit 1
fi

# linux, check if limit is setup
if [ "`cat /proc/sys/fs/inotify/max_user_watches`" -lt $n ]; then
	cat << EOF 1>&2
	$0: Please do this first:
	for now only:			echo $n | sudo dd of=/proc/sys/fs/inotify/max_user_watches
	and persistant after reboot:	echo "fs.inotify.max_user_watches=$n" | sudo dd of=/etc/sysctl.d/90-backup-inotify.conf
EOF
	exit 1
fi

# linux, check if inotifywait is installed
if ! which inotifywait > /dev/null 2> /dev/null ; then
	echo "$0: please install inotify-tools:"
	echo "	sudo apt-get install inotify-tools"
	exit 1
fi

while [ ! -z "$1" ]; do case "$1" in
	-\?|-h|--help)
		help $0
		exit 0
		;;
	
	-i)
		interval_seconds="$2"
		shift
		;;
	
	-m)
		email="$email,$2"
		email="${email#,}"
		shift
		;;
	
	-s)
		subject="$2"
		shift
		;;

	-d|-v)
		verbose=:
		;;
	
	-k)
		kill=:
		;;
	
	-V)
		echo $version
		exit 0
		;;
	
	-*)
		echo "invalid option '$1'"
		help $0
		exit 1
		;;
		
	*)
		directories="$directories $1";
		;;
		
esac; shift; done

if test -z "$directories"; then
	echo "no directory ?"
	help "$0"
	exit 1
fi
	

if ! $kill && test -z "$email" -o -z "$subject"; then
	echo "$0: email and subject are mandatory"
	help "$0"
	exit 1
fi

# unique name for user and directories to watch
name=`echo "${0##*/}-${USER}-\`hostname\`-$directories" | sed -e 's,[/\ ],-,g' -e 's,-[-]*,-,g'`
pool=/tmp/$name.pool
pidfile=/tmp/$name.pid

if [ -r "$pidfile" ]; then
	pid=`cat $pidfile`
	if ps $pid > /dev/null; then
		if $kill; then
			pkill -P $pid
			rm -f "$pidfile"
			echo "$0 (in$directories) gone"
		else
			echo "$0: already running (pid $pid)"
		fi
		exit 0
	fi
	
	# here: process not running
	rm -f $pidfile
	rm -f $pool
fi

# here, could not kill
if $kill; then
	echo "$pidfile not found, try 'killall inotifywait'"
	exit 1
fi

# check interval
[ "$interval_seconds" -gt 0 ] || { echo "bad interval: '$interval_seconds'"; exit 1; }

if $verbose; then
	linuxwatch
else
	linuxwatch 1> /dev/null 2>/dev/null & pid=$!
	
	#XXX be smarter than that
	sleep 1
	if ps $pid > /dev/null; then
		echo $pid > $pidfile
	else
		echo "could not start:"
		linuxwatch
		rm -f $pool
	fi
fi
